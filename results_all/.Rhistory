df_nash_br_delta_u <- read.csv("F:\\Spring2017\\workspaces\\game_theoretic_planner\\results_769\\NASH,BR,BOUNDARY_u_deltas.csv",header=TRUE,sep=",")
View(df_nash_br_delta_u)
View(df_nash_br_delta_u)
hist(df_nash_br_delta_u$ON_EQ)
setwd("F:\\Spring2017\\workspaces\\game_theoretic_planner\\results_all")
file_list <- list.files()
for (file in file_list){
# if the merged dataset doesn't exist, create it
if (!exists("dataset")){
dataset <- read.table(file, header=TRUE, sep=",")
}
# if the merged dataset does exist, append to it
if (exists("dataset")){
temp_dataset <-read.csv(file, header=TRUE, sep=",")
dataset<-rbind(dataset, temp_dataset)
rm(temp_dataset)
}
}
# RQ1: Which solution concept better predicts empirical driving behavior.
# Run Kruskal Walis test to check that the difference in EQ_TYPE group in significant
res.kruskal <- kruskal.test(ON_EQ ~ EQ_TYPE, data = dataset)
# Run Dunn's post hoc test on significant Kruskal Walis result to test the significant between pairwise comparison of the group factors.
library(rstatix)
res.dunn <- dunn_test(dataset, ON_EQ ~ EQ_TYPE, p.adjust.method="holm", detailed=TRUE)
# assign epsilon values to zero values for Gamma glm fitting
library(data.table)
setDT(dataset)[ON_EQ == 0, ON_EQ := runif(.N, min=0.000000001, max=0.0000001)]
# RQ2
# Change the task directions to task types
dataset$TASK <- as.character(dataset$TASK)
dataset$TASK[dataset$TASK=="S_W" | dataset$TASK == "E_S" | dataset$TASK == "N_E" | dataset$TASK == "W_N"] <- "LEFT_TURN"
dataset$TASK[dataset$TASK=="W_S" | dataset$TASK == "S_E"] <- "RIGHT_TURN"
dataset$SEGMENT <- as.character(dataset$SEGMENT)
dataset$SEGMENT[dataset$TASK=="LEFT_TURN" & dataset$SEGMENT == "OTHER  LANES"] <- "LEFT_TURN ENTRY OR EXIT"
dataset$SEGMENT[dataset$TASK=="RIGHT_TURN" & dataset$SEGMENT == "OTHER  LANES"] <- "RIGHT_TURN ENTRY OR EXIT"
dataset$TASK <- as.factor(dataset$TASK)
dataset$EQ_TYPE <- as.factor(dataset$EQ_TYPE)
dataset$NEXT_CHANGE <- as.factor(dataset$NEXT_CHANGE)
dataset$SEGMENT <- as.factor(dataset$SEGMENT)
dataset$SPEED <- as.factor(dataset$SPEED)
dataset$PEDESTRIAN <- as.factor(dataset$PEDESTRIAN)
dataset$RELEV_VEHICLE <- as.factor(dataset$RELEV_VEHICLE)
dataset$ACTIONS <- as.factor(dataset$ACTIONS)
res.glm <- glm(ON_EQ ~ . - TASK - ACTIONS, family = Gamma(), data=dataset)
dataset_orig <- dataset
X <- split(dataset, dataset$EQ_TYPE)
for (eq in levels(dataset$EQ_TYPE)){
X[[eq]]$EQ_TYPE <- NULL
}
for (eq in levels(dataset$EQ_TYPE)){
print(eq)
res.glm.list[[eq]] <- glm(ON_EQ ~ . - TASK - ACTIONS, family = Gamma(), data=X[[eq]])
}
res.glm.list <- list()
X <- split(dataset, dataset$EQ_TYPE)
for (eq in levels(dataset$EQ_TYPE)){
X[[eq]]$EQ_TYPE <- NULL
}
for (eq in levels(dataset$EQ_TYPE)){
print(eq)
res.glm.list[[eq]] <- glm(ON_EQ ~ . - TASK - ACTIONS, family = Gamma(), data=X[[eq]])
}
l2_levels <- c("BR","MAXMIN","NASH")
dataset.split.eq_type <- X
rm(X)
dataset.temp <- subset(dataset, grepl("BR|*", EQ_TYPE))
View(dataset.temp)
dataset.temp <- subset(dataset, grepl("^BR|*", EQ_TYPE))
View(dataset.temp)
dataset.temp <- subset(dataset, grepl("^BR\\|*", EQ_TYPE))
View(dataset.temp)
glm.temp <- glm(ON_EQ ~ . - TASK - ACTIONS, family = Gamma(), data=dataset.temp)
summary(glm.temp, dispersion = 1)
level(dataset.temp$SPEED)
levels(dataset.temp$SPEED)
relevel(dataset.temp$SPEED,"LOW  SPEED")
levels(dataset.temp$SPEED)
levels(dataset.temp$SPEED) <- relevel(dataset.temp$SPEED,"LOW  SPEED")
levels(dataset.temp$SPEED)
levels(dataset$SPEED) <- relevel(dataset$SPEED,"LOW  SPEED")
dataset.split.eq_type <- split(dataset, dataset$EQ_TYPE)
for (eq in levels(dataset$EQ_TYPE)){
dataset.split.eq_type[[eq]]$EQ_TYPE <- NULL
}
for (eq in levels(dataset$EQ_TYPE)){
print(eq)
res.glm.list[[eq]] <- glm(ON_EQ ~ . - TASK - ACTIONS, family = Gamma(), data=dataset.split.eq_type[[eq]])
}
levels(dataset$SPEED) <- relevel(dataset$SPEED,"LOW  SPEED")
levels(dataset$SPEED)
View(dataset)
dataset <- dataset_orig
summary(dataset)
levels(dataset$SPEED)
relevel(dataset$SPEED,"LOW  SPEED")
levels(dataset$SPEED) <- relevel(dataset$SPEED,"LOW  SPEED")
levels(dataset$SPEED)
res.glm <- glm(ON_EQ ~ . - TASK - ACTIONS, family = Gamma(), data=dataset)
levels(dataset$SPEED)
summary(dataset)
dataset <- dataset_orig
summary(dataset)
levels(dataset$SPEED)
dataset$SPEED <- relevel(dataset$SPEED,"LOW  SPEED")
summary(dataset)
levels(dataset$SPEED)
res.glm <- glm(ON_EQ ~ . - TASK - ACTIONS, family = Gamma(), data=dataset)
res.glm.list <- list()
dataset.split.eq_type <- split(dataset, dataset$EQ_TYPE)
for (eq in levels(dataset$EQ_TYPE)){
dataset.split.eq_type[[eq]]$EQ_TYPE <- NULL
}
for (eq in levels(dataset$EQ_TYPE)){
print(eq)
res.glm.list[[eq]] <- glm(ON_EQ ~ . - TASK - ACTIONS, family = Gamma(), data=dataset.split.eq_type[[eq]])
}
dataset.temp <- subset(dataset, grepl("^BR\\|*", EQ_TYPE))
View(dataset.temp)
summary(dataset)
summary(dataset.temp)
glm.temp <- glm(ON_EQ ~ . - TASK - ACTIONS, family = Gamma(), data=dataset.temp)
summary(glm.temp, dispersion = 1)
dataset.split.l1.br <- dataset.temp
rm(dataset.temp)
for (l in l2_levels){}
for (l in l2_levels){
}
dataset.split.l1l2 <- list()
for (l in l2_levels){
dataset.split.l1l2[[l]] <- subset(dataset, grepl(paste("^",l,"\\|*"), EQ_TYPE))
}
RM(dataset.split.l1.br)
rm(dataset.split.l1.br)
View(dataset.split.l1l2$MAXMIN)
View(dataset.split.l1l2$BR)
paste("^",l,"\\|*")
paste("^",l,"\\|*", sep = "")
for (l in l2_levels){
dataset.split.l1l2[[l]] <- subset(dataset, grepl(paste("^",l,"\\|*", sep = ""), EQ_TYPE))
}
View(dataset.split.l1l2$MAXMIN)
for (l in l2_levels){
res.kruskal.l1l2 <- kruskal.test(ON_EQ ~ EQ_TYPE, data = dataset.split.l1l2[[l]])
print(res.kruskal.l1l2)
}
for (l in l2_levels){
res.dunn.l1l2 <- dunn_test(dataset[[l]], ON_EQ ~ EQ_TYPE, p.adjust.method="holm", detailed=TRUE)
print(res.dunn.l1l2)
}
for (l in l2_levels){
res.dunn.l1l2 <- dunn_test(dataset.split.l1l2[[l]], ON_EQ ~ EQ_TYPE, p.adjust.method="holm", detailed=TRUE)
print(res.dunn.l1l2)
}
for (l in l2_levels){
dataset.split.l1l2[[l]] <- subset(dataset, grepl(paste("^",l,"\\|*", sep = ""), EQ_TYPE))
dataset.split.l1l2[[l]]$TRAJ_TYPE <- NA
}
View(dataset.split.l1l2$MAXMIN)
for (l in l2_levels){
dataset.split.l1l2[[l]] <- subset(dataset, grepl(paste("^",l,"\\|*", sep = ""), EQ_TYPE))
dataset.split.l1l2[[l]]$TRAJ_TYPE <- NA
dataset.split.l1l2[[l]]$L3_EQ <- NA
}
View(dataset.split.l1l2$MAXMIN)
dataset.split.l1l2$MAXMIN[0]
dataset.split.l1l2$MAXMIN[[0]]
dataset.split.l1l2$MAXMIN[[0,0]]
dataset.split.l1l2$MAXMIN$TRAJ_TYPE <- tail(strsplit(dataset.split.l1l2$MAXMIN$EQ_TYPE,split = "|"),n=1)
dataset.split.l1l2$MAXMIN$EQ_TYPE <- as.character(dataset.split.l1l2$MAXMIN$EQ_TYPE)
dataset.split.l1l2$MAXMIN$TRAJ_TYPE <- tail(strsplit(dataset.split.l1l2$MAXMIN$EQ_TYPE,split = "|"),n=1)
summary(dataset.split.l1l2$MAXMIN$TRAJ_TYPE)
dataset.split.l1l2$MAXMIN$TRAJ_TYPE <- as.character(dataset.split.l1l2$MAXMIN$TRAJ_TYPE)
summary(dataset.split.l1l2$MAXMIN$TRAJ_TYPE)
dataset.split.l1l2$MAXMIN$TRAJ_TYPE <- tail(strsplit(dataset.split.l1l2$MAXMIN$EQ_TYPE,split = "|"),n=1)
View(dataset.split.l1l2$MAXMIN)
dataset.split.l1l2$MAXMIN$TRAJ_TYPE <- NA
View(dataset.split.l1l2$MAXMIN)
sumary(dataset.split.l1l2$MAXMIN$EQ_TYPE)
dataset.split.l1l2$MAXMIN$EQ_TYPE <- as.factor(dataset.split.l1l2$MAXMIN$EQ_TYPE)
summary(dataset.split.l1l2$MAXMIN$EQ_TYPE)
dataset.split.l1l2$MAXMIN$L3_EQ[dataset.split.l1l2$MAXMIN$EQ_TYPE=="MAXMIN|BR|BOUNDARY"] <- "BR"
dataset.split.l1l2$MAXMIN$L3_EQ[dataset.split.l1l2$MAXMIN$EQ_TYPE=="MAXMIN|BR|BOUNDARY" |
dataset.split.l1l2$MAXMIN$EQ_TYPE=="MAXMIN|BR|GAUSSIAN"] <- "BR"
dataset.split.l1l2$MAXMIN$L3_EQ[dataset.split.l1l2$MAXMIN$EQ_TYPE=="MAXMIN|MAXMIN|BOUNDARY" |
dataset.split.l1l2$MAXMIN$EQ_TYPE=="MAXMIN|MAXMIN|GAUSSIAN"] <- "MAXMIN"
dataset.split.l1l2$MAXMIN$L3_EQ[dataset.split.l1l2$MAXMIN$EQ_TYPE=="MAXMIN|BR|GAUSSIAN" |
dataset.split.l1l2$MAXMIN$EQ_TYPE=="MAXMIN|MAXMIN|GAUSSIAN"] <- "GAUSSIAN"
dataset.split.l1l2$MAXMIN$L3_EQ[dataset.split.l1l2$MAXMIN$EQ_TYPE=="MAXMIN|BR|BOUNDARY" |
dataset.split.l1l2$MAXMIN$EQ_TYPE=="MAXMIN|MAXMIN|BOUNDARY"] <- "BOUNDARY"
dataset.split.l1l2$MAXMIN$L3_EQ[dataset.split.l1l2$MAXMIN$EQ_TYPE=="MAXMIN|BR|BOUNDARY" |
dataset.split.l1l2$MAXMIN$EQ_TYPE=="MAXMIN|BR|GAUSSIAN"] <- "BR"
dataset.split.l1l2$MAXMIN$L3_EQ[dataset.split.l1l2$MAXMIN$EQ_TYPE=="MAXMIN|MAXMIN|BOUNDARY" |
dataset.split.l1l2$MAXMIN$EQ_TYPE=="MAXMIN|MAXMIN|GAUSSIAN"] <- "MAXMIN"
dataset.split.l1l2$MAXMIN$TRAJ_TYPE[dataset.split.l1l2$MAXMIN$EQ_TYPE=="MAXMIN|BR|GAUSSIAN" |
dataset.split.l1l2$MAXMIN$EQ_TYPE=="MAXMIN|MAXMIN|GAUSSIAN"] <- "GAUSSIAN"
dataset.split.l1l2$MAXMIN$TRAJ_TYPE[dataset.split.l1l2$MAXMIN$EQ_TYPE=="MAXMIN|BR|BOUNDARY" |
dataset.split.l1l2$MAXMIN$EQ_TYPE=="MAXMIN|MAXMIN|BOUNDARY"] <- "BOUNDARY"
dataset.split.l1l2$MAXMIN$TRAJ_TYPE[dataset.split.l1l2$MAXMIN$EQ_TYPE=="MAXMIN|BASELINE_ONLY"] <- "BASELINE"
View(dataset.split.l1l2$MAXMIN)
summary(dataset.split.l1l2$NASH$EQ_TYPE)
summary(dataset.split.l1l2$MAXMIN$EQ_TYPE)
summary(dataset.split.l1l2$NASH$EQ_TYPE)
summary(dataset.split.l1l2$BR$EQ_TYPE)
levels(dataset.split.l1l2$NASH$SPEED)
dataset.split.l1l2$NASH$L3_EQ[dataset.split.l1l2$NASH$EQ_TYPE=="NASH|BR|BOUNDARY" |
dataset.split.l1l2$NASH$EQ_TYPE=="NASH|BR|GAUSSIAN"] <- "BR"
dataset.split.l1l2$NASH$L3_EQ[dataset.split.l1l2$NASH$EQ_TYPE=="NASH|MAXMIN|BOUNDARY" |
dataset.split.l1l2$NASH$EQ_TYPE=="NASH|MAXMIN|GAUSSIAN"] <- "MAXMIN"
dataset.split.l1l2$NASH$TRAJ_TYPE[dataset.split.l1l2$NASH$EQ_TYPE=="NASH|BR|GAUSSIAN" |
dataset.split.l1l2$NASH$EQ_TYPE=="NASH|MAXMIN|GAUSSIAN"] <- "GAUSSIAN"
dataset.split.l1l2$NASH$TRAJ_TYPE[dataset.split.l1l2$NASH$EQ_TYPE=="NASH|BR|BOUNDARY" |
dataset.split.l1l2$NASH$EQ_TYPE=="NASH|MAXMIN|BOUNDARY"] <- "BOUNDARY"
dataset.split.l1l2$NASH$TRAJ_TYPE[dataset.split.l1l2$NASH$EQ_TYPE=="NASH|BASELINE_ONLY"] <- "BASELINE"
View(dataset.split.l1l2$NASH)
dataset.split.l1l2$BR$L3_EQ[dataset.split.l1l2$BR$EQ_TYPE=="BR|BR|BOUNDARY" |
dataset.split.l1l2$BR$EQ_TYPE=="BR|BR|GAUSSIAN"] <- "BR"
dataset.split.l1l2$BR$L3_EQ[dataset.split.l1l2$BR$EQ_TYPE=="BR|MAXMIN|BOUNDARY" |
dataset.split.l1l2$BR$EQ_TYPE=="BR|MAXMIN|GAUSSIAN"] <- "MAXMIN"
dataset.split.l1l2$BR$TRAJ_TYPE[dataset.split.l1l2$BR$EQ_TYPE=="BR|BR|GAUSSIAN" |
dataset.split.l1l2$BR$EQ_TYPE=="BR|MAXMIN|GAUSSIAN"] <- "GAUSSIAN"
dataset.split.l1l2$BR$TRAJ_TYPE[dataset.split.l1l2$BR$EQ_TYPE=="BR|BR|BOUNDARY" |
dataset.split.l1l2$BR$EQ_TYPE=="BR|MAXMIN|BOUNDARY"] <- "BOUNDARY"
dataset.split.l1l2$BR$TRAJ_TYPE[dataset.split.l1l2$BR$EQ_TYPE=="BR|BASELINE_ONLY"] <- "BASELINE"
View(dataset.split.l1l2$BR)
for (l in l2_levels){
res.dunn.l1l2 <- dunn_test(dataset.split.l1l2[[l]], ON_EQ ~ L3_EQ + TRAJ_TYPE, p.adjust.method="holm", detailed=TRUE)
print(res.dunn.l1l2)
}
summary(dataset.split.l1l2$BR)
dataset.split.l1l2$BR$TRAJ_TYPE <- as.factor(dataset.split.l1l2$BR$TRAJ_TYPE)
dataset.split.l1l2$BR$EQ_TYPE <- as.factor(dataset.split.l1l2$BR$EQ_TYPE)
dataset.split.l1l2$NASH$TRAJ_TYPE <- as.factor(dataset.split.l1l2$NASH$TRAJ_TYPE)
dataset.split.l1l2$NASH$EQ_TYPE <- as.factor(dataset.split.l1l2$NASH$EQ_TYPE)
dataset.split.l1l2$MAXMIN$TRAJ_TYPE <- as.factor(dataset.split.l1l2$MAXMIN$TRAJ_TYPE)
dataset.split.l1l2$MAXMIN$EQ_TYPE <- as.factor(dataset.split.l1l2$MAXMIN$EQ_TYPE)
for (l in l2_levels){
res.dunn.l1l2 <- dunn_test(dataset.split.l1l2[[l]], ON_EQ ~ L3_EQ + TRAJ_TYPE, p.adjust.method="holm", detailed=TRUE)
print(res.dunn.l1l2)
}
for (l in l2_levels){
res.dunn.l1l2 <- dunn_test(dataset.split.l1l2[[l]], ON_EQ ~ L3_EQ, p.adjust.method="holm", detailed=TRUE)
print(res.dunn.l1l2)
}
for (l in l2_levels){
res.dunn.l1l2 <- dunn_test(dataset.split.l1l2[[l]], ON_EQ ~ L3_EQ, p.adjust.method="holm", detailed=TRUE)
print(l)
print(res.dunn.l1l2)
}
for (l in l2_levels){
res.glm.l1l2.list.rq3[[l]] <- glm(ON_EQ ~ . - TASK - ACTIONS - EQ_TYPE, family = Gamma(), data=dataset.split.l1l2[[l]])
print(l)
print(res.glm.l1l2.list.rq3[[l]])
}
res.glm.l1l2.list.rq3 <- list()
for (l in l2_levels){
res.glm.l1l2.list.rq3[[l]] <- glm(ON_EQ ~ . - TASK - ACTIONS - EQ_TYPE, family = Gamma(), data=dataset.split.l1l2[[l]])
print(l)
print(res.glm.l1l2.list.rq3[[l]])
}
for (l in l2_levels){
print(l)
summary(res.glm.l1l2.list.rq3[[l]], dispersion = 1)
}
for (l in l2_levels){
print(l)
print(summary(res.glm.l1l2.list.rq3[[l]], dispersion = 1))
}
for (eq in levels(dataset$EQ_TYPE)){
print(eq)
print(summary(res.glm.list[[eq]], dispersion = 1))
}
dapres<-dominanceAnalysis(res.glm.list$`NASH|MAXMIN|GAUSSIAN`)
library(dominanceanalysis)
dapres<-dominanceAnalysis(res.glm.list$`NASH|MAXMIN|GAUSSIAN`)
dapres<-dominanceAnalysis(res.glm.list$`BR|BASELINE_ONLY`)
dapres<-dominanceAnalysis(res.glm.list$`MAXMIN|BR|BOUNDARY`)
dapres
plot(dapres, which.graph ="conditional",fit.function = "r2.m")
plot(dapres, which.graph ="conditional",fit.function = "r2.e")
contributionByLevel(dapres,fit.functions="r2.n")
getFits(dapres,"r2.n")
getFits(dapres,"r2.e")
getFits(dapres,"r2.m")
contributionByLevel(dapres,fit.functions="r2.m")
plot(dapres, which.graph ="conditional",fit.function = "r2.m")
